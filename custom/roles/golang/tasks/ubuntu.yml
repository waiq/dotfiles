---
- name: "Golang install dependencies"
  ansible.builtin.apt:
    pkg:
      - "curl"
      - "gcc"
      - "git"
      - "findutils"
      - "make"
      - "rsync"
      - "tar"
      - "jp"
    state: present
  register: apt_result
  become: true
  until: apt_result is success
  retries: 1
  delay: 2

- name: "Golang define GOARCH"
  ansible.builtin.set_fact:
    goarch: "{{ ansible_machine | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }}"

- name: "Golang define GOOS"
  ansible.builtin.set_fact:
    goos: "{{ ansible_system | lower }}"

- name: "Golang GOARCH Value"
  ansible.builtin.debug:
    var: goarch

- name: "Golang GOOS Value"
  ansible.builtin.debug:
    var: goos

- name: "Golang getting version information"
  ansible.builtin.command: "{{ golang.dirs.bin }}/go version"
  register: current_go_version
  changed_when: false
  failed_when: false

- name: "Golang querying Latest Version JSON"
  ansible.builtin.uri:
    url: https://go.dev/dl/?mode=json
  register: go_latest_version_json
  changed_when: false

- name: "Golang registering go Latest Version"
  ansible.builtin.set_fact:
    go_latest_version: "go version {{ go_latest_version_json.json[0].version }} {{ goos }}/{{ goarch }}"

- name: "Golang registering go Latest Release"
  ansible.builtin.set_fact:
    go_latest_release: "{{ go_latest_version_json.json[0].version }}"

- name: "Golang define go_file"
  ansible.builtin.set_fact:
    go_file: "{{ go_latest_release }}.{{ goos }}-{{ goarch }}"

- name: "Golang show current_go_version debug"
  ansible.builtin.debug:
    var: current_go_version.stdout|default('')

- name: "Golang show go_latest_release debug"
  ansible.builtin.debug:
    var: go_latest_release

- name: "Golang install"
  block:
    - name: "Golang ensure clean download destination"
      ansible.builtin.file:
        path: "/tmp/{{ go_file }}.tar.gz"
        state: absent

    - name: "Golang downloading goLang release"
      ansible.builtin.get_url:
        url: "https://golang.org/dl/{{ go_file }}.tar.gz"
        dest: /tmp/
        mode: "0644"
        force: true
      notify:
        - Cleanup go downloaded tar

    - name: "Golang ensure clean extraction destination"
      ansible.builtin.file:
        path: "/tmp/go"
        state: absent

    - name: "Golang extract go tar file"
      ansible.builtin.unarchive:
        src: "/tmp/{{ go_file }}.tar.gz"
        dest: /tmp

    - name: "Golang remove any current Go installations"
      ansible.builtin.file:
        path: "{{ golang.dirs.install_path }}/go"
        state: absent

    - name: "Golang install Go"
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/go
        dest: "{{ golang.dirs.install_path }}"
        mode: preserve
        force: true
      notify:
        - Remove extracted go directory

    - name: "Golang setup init"
      ansible.builtin.template:
        src: "{{ core.dirs.custom }}/roles/golang/templates/init_d/10-golang.j2"
        dest: "{{ core.dirs.init_d }}/10-golang.sh"
        mode: "0755"

  when: go_latest_version not in current_go_version.stdout|default('')
